"use strict";(self.webpackChunk_dexma_ui_components=self.webpackChunk_dexma_ui_components||[]).push([[7730],{"./src/components/Gauge.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{ZP:()=>components_Gauge});var react=__webpack_require__("./node_modules/react/index.js"),highcharts=__webpack_require__("./node_modules/highcharts/highcharts.js"),highcharts_default=__webpack_require__.n(highcharts),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Chart=__webpack_require__("./src/components/Chart.js"),numberFormatter=function numberFormatter(numberAsStr,decimal,grouping){var number=parseFloat(numberAsStr);return number>1e4||number<-1e4?Math.floor(number).toString().replace(/\B(?=(\d{3})+(?!\d))/g,grouping):0===number?"0":applyTwoDecimals(number,decimal,grouping)},applyTwoDecimals=function applyTwoDecimals(number,decimal,grouping){return parseFloat(number.toFixed(2)).toString().replace(/,|\./g,decimal).replace(/\B(?=(\d{3})+(?!\d))/g,grouping)},applyScientific=function applyScientific(number,decimal,exponential){return number.toExponential(exponential).replace(/\.([0-9]*[1-9])?0*/g,".$1").replace(/,|\./g,decimal)},theme=__webpack_require__("./src/styles/theme.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i.return&&(_r=_i.return(),Object(_r)!==_r))return}finally{if(_d)throw _e}}return _arr}}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!==_typeof(input)||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!==_typeof(res))return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"===_typeof(key)?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}highcharts_default().wrap(highcharts_default().Tooltip.prototype,"refresh",(function(p,point,mouseEvent){if(p.call(this,point,mouseEvent),!this.isHidden&&!this.shared&&!this.split){var pointTooltipBorderColor=point&&point.options.tooltip&&point.options.tooltip.borderColor,seriesTooltipBorderColor=point&&point.series&&point.series.options.tooltip&&point.series.options.tooltip.borderColor,borderColor=pointTooltipBorderColor||seriesTooltipBorderColor,label=this.label;label&&borderColor&&label.attr({stroke:borderColor})}}));var valueAsPercentage=function valueAsPercentage(value,max,min){return 100*(value-min)/(max-min)},getThreshold=function getThreshold(max,min){var value=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return min<value&&max<value?max:min>value&&max>value?min:value},parseInsideRange=function parseInsideRange(value,startRange,endRange){return value>endRange?endRange:value<startRange?startRange:value},validValueAndThreshold=function validValueAndThreshold(value,threshold,min,max){return!(value<=min&&value<=max&&min>threshold&&max>threshold||value>=min&&value>=max&&min<threshold&&max<threshold)},getSize=function getSize(width,height){var minRatio=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.9,proportion=height/width;return width/(arguments.length>2&&void 0!==arguments[2]?arguments[2]:10)*Math.min(proportion,minRatio)},renderIndicatorLabel=function renderIndicatorLabel(chart,indicator,hasData,decimalSeparator,thousandSeparator,mainSize){var currentChart=chart;currentChart.indicatorLabel=currentChart.renderer.text(hasData?numberFormatter(indicator.value,decimalSeparator,thousandSeparator):"-",currentChart.chartWidth/2,currentChart.chartHeight/2).css({color:indicator.color,fontSize:"".concat(mainSize,"px"),fontWeight:700}).attr({zIndex:3}).add();var textBox=currentChart.indicatorLabel.getBBox();textBox.width>currentChart.chartWidth/indicator.value.toString().length&&(currentChart.indicatorLabel.attr({text:applyScientific(parseFloat(indicator.value),decimalSeparator,2)}),textBox=currentChart.indicatorLabel.getBBox()),currentChart.indicatorLabel.translate(-textBox.width/2,mainSize+16)},renderSuffix=function renderSuffix(chart,showAsPercentage,units,mainSize,suffixSize){var currentChart=chart;currentChart.suffixDataLabel=currentChart.renderer.text(showAsPercentage?"%":units||"",currentChart.chartWidth/2,currentChart.chartHeight/2).css({color:theme.$_.gray500,fontWeight:400,fontSize:"".concat(suffixSize,"px")}).attr({zIndex:3}).add();var suffixBox=currentChart.suffixDataLabel.getBBox();currentChart.suffixDataLabel.translate(-suffixBox.width/2,mainSize+suffixSize+16)},getSymbolElement=function getSymbolElement(difference){return difference>=0&&difference!==Number.POSITIVE_INFINITY?"↑":difference<0&&difference!==Number.NEGATIVE_INFINITY?"↓":"-"},getPercentageElement=function getPercentageElement(comparison,value,decimalSeparator,thousandSeparator){var percentage=function getPercentageComparisonValue(comparativeValue,initialValue){return(initialValue-comparativeValue)/Math.abs(comparativeValue)*100}(comparison.value,value);return'<span style="font-size: 1.2em; font-weight: bold; color: '.concat(comparison.color,';">').concat(getSymbolElement(percentage),'</span><span style="color: ').concat(comparison.color,';"> ').concat(Number.isNaN(percentage)||percentage===Number.POSITIVE_INFINITY||percentage===Number.NEGATIVE_INFINITY?"":numberFormatter(Math.abs(percentage),decimalSeparator,thousandSeparator),"%</span>")},getCompareIndicator=function getCompareIndicator(comparison,indicator,units,decimalSeparator,thousandSeparator){return comparison.showAsPercentage?getPercentageElement(comparison,indicator.value,decimalSeparator,thousandSeparator):function getDifferenceElement(comparison,value,units,decimalSeparator,thousandSeparator){var difference=value-comparison.value;return'<span style="font-size: 1.2em; font-weight: bold; color: '.concat(comparison.color,';">').concat(getSymbolElement(difference),'</span><span style="color: ').concat(comparison.color,';"> ').concat(Number.isNaN(difference)?"":numberFormatter(Math.abs(difference),decimalSeparator,thousandSeparator)," ").concat(units,"</span>")}(comparison,indicator.value,units,decimalSeparator,thousandSeparator)},renderComparison=function renderComparison(chart,indicator,hasData,units,comparison,decimalSeparator,thousandSeparator,mainSize,suffixSize){var currentChart=chart;currentChart.comparisonPercentage&&currentChart.comparisonPercentage.destroy();var comparisonPerCentageSize=getSize(currentChart.chartWidth,currentChart.chartHeight,20);currentChart.comparisonPercentage=currentChart.renderer.text(hasData?getCompareIndicator(comparison,indicator,units,decimalSeparator,thousandSeparator):"- ".concat(comparison.showAsPercentage?"%":units),currentChart.chartWidth/2,currentChart.chartHeight/2).css({color:theme.$_.gray500,fontWeight:400,fontSize:"min(".concat(comparisonPerCentageSize,"px, 30px)")}).attr({zIndex:3}).add();var comparisonPercentageBox=currentChart.comparisonPercentage.getBBox();currentChart.comparisonPercentage.translate(-comparisonPercentageBox.width/2,2.35*mainSize+2.35*suffixSize),currentChart.comparisonLabel&&currentChart.comparisonLabel.destroy();var comparisonSize=getSize(currentChart.chartWidth,currentChart.chartHeight,24);currentChart.comparisonLabel=currentChart.renderer.text(function getComparisonText(comparison){return'<span style="color: '.concat(theme.$_.gray500,';">').concat(comparison.period.text,"</span>")}(comparison),currentChart.chartWidth/2,currentChart.chartHeight/2).css({color:theme.$_.gray500,fontWeight:400,fontSize:"min(".concat(comparisonSize,"px, 24px)")}).attr({zIndex:3}).add();var comparisonBox=currentChart.comparisonLabel.getBBox();currentChart.comparisonLabel.translate(-comparisonBox.width/2,2.5*mainSize+2.5*suffixSize+12)},pane={startAngle:-125,endAngle:125,background:[{outerRadius:"100%",innerRadius:"0%",backgroundColor:"transparent",borderWidth:0}],useHTML:!0},plotOptions={solidgauge:{stickyTracking:!1,dataLabels:{x:0,y:50,borderWidth:10,useHTML:!0}},gauge:{dial:{baseLength:"100%",radius:"90%",rearLength:"-89%",borderWidth:12}}},Gauge=function Gauge(props){var checkpoints=props.checkpoints,comparison=props.comparison,decimalPoint=props.decimalPoint,hasData=props.hasData,indicator=props.indicator,max=props.max,min=props.min,title=props.title,options=props.options,ranges=props.ranges,showAsPercentage=props.showAsPercentage,thousandsSep=props.thousandsSep,type=props.type,units=props.units,dataTestId=props["data-testid"],_useState2=_slicedToArray((0,react.useState)(),2),gaugeOptions=_useState2[0],setGaugeOptions=_useState2[1];return(0,react.useEffect)((function(){if("DIAL"===type){var resultChart=function getChart(chart,indicator,hasData,decimalSeparator,thousandSeparator,showAsPercentage,units,comparison){return _objectSpread(_objectSpread({},chart),{},{events:{render:function render(){this.indicatorLabel&&this.indicatorLabel.destroy();var mainSize=getSize(this.chartWidth,this.chartHeight);renderIndicatorLabel(this,indicator,hasData,decimalSeparator,thousandSeparator,mainSize),this.suffixDataLabel&&this.suffixDataLabel.destroy();var suffixSize=getSize(this.chartWidth,this.chartHeight,16);renderSuffix(this,showAsPercentage,units,mainSize,suffixSize),comparison&&comparison.enabled&&renderComparison(this,indicator,hasData,units,comparison,decimalSeparator,thousandSeparator,mainSize,suffixSize)}}})}(_objectSpread(_objectSpread({},defaultOptions.chart),null==options?void 0:options.chart),indicator,hasData,decimalPoint,thousandsSep,showAsPercentage,units,comparison),yAxis=function getYAxis(showAsPercentage,minValue,maxValue){return{min:showAsPercentage?0:minValue,max:showAsPercentage?100:maxValue,lineWidth:0,allowDecimals:!0,labels:{distance:"105%",enabled:!0,style:{fontSize:"12px",color:theme.$_.gray500}},minorTickInterval:null,tickWidth:0}}(showAsPercentage,min,max),rangeSeries=ranges&&ranges.length>0?function getRangeSeries(ranges,min,max){return ranges.sort((function(rangeA,rangeB){return rangeB.to-rangeA.to})).filter((function(range){return validValueAndThreshold(range.to,range.from,min,max)})).map((function(range){var threshold=getThreshold(max,min,range.from),y=parseInsideRange(range.to,min,max);return{data:[{color:range.color,radius:"75%",innerRadius:"70%",y}],dataLabels:{format:""},threshold,tooltip:{pointFormat:'<span style="fill:'.concat(range.color,"; stroke:").concat(range.color,"; border-color:").concat(range.color,';"><span style="color:').concat(range.color,';">●</span> <b>').concat(range.tooltip,"</b></span><br/>")},zIndex:1}}))}(ranges,min,max):[],valueSerie=function getValueSeries(indicator,max,min,name,showAsPercentage){var value=showAsPercentage?valueAsPercentage(indicator.value,max,min):indicator.value,threshold=getThreshold(max,min);return validValueAndThreshold(value,0,min,max)?(value=parseInsideRange(value,min,max),{name:name||"Value",data:[{color:indicator.color||"#000",radius:"90%",innerRadius:"80%",y:value}],dataLabels:{borderWidth:0,verticalAlign:"bottom",format:""},threshold,tooltip:{pointFormat:'<span style="fill:'.concat(indicator.color,"; stroke:").concat(indicator.color,"; border-color:").concat(indicator.color,';"><span style="color:').concat(indicator.color,';">●</span> <b>').concat(indicator.tooltip,"</b></span><br/>")},useHTML:!0,zIndex:1}):{}}(indicator,max,min,title,showAsPercentage),checkpointSeries=checkpoints&&checkpoints.length>0?function getCheckpointSeries(checkpoints,max,min,showAsPercentage){return checkpoints.filter((function(cp){return cp.value<=max&&cp.value>=min})).map((function(cp){return{data:[showAsPercentage?valueAsPercentage(cp.value,max,min):cp.value],tooltip:{borderColor:cp.color,pointFormat:'<span style="fill:'.concat(cp.color,"; stroke:").concat(cp.color,"; border-color:").concat(cp.color,';"><span style="color:').concat(cp.color,';">●</span> <b>').concat(cp.tooltip,"</b></span><br/>")},dataLabels:{format:""},name:cp.tooltip,type:"gauge",dial:{backgroundColor:cp.color},zIndex:2}}))}(checkpoints,max,min,showAsPercentage):[],backgroundSerie=function getBackgroundSerie(backgroundColor,max){return{data:[{color:backgroundColor,radius:"90%",innerRadius:"80%",y:max}],dataLabels:{format:""},enableMouseTracking:!1,zIndex:0}}(new(highcharts_default().Color)(theme.$_.gray200).setOpacity(.3).get(),max),series=[valueSerie].concat(_toConsumableArray(rangeSeries),_toConsumableArray(checkpointSeries),[backgroundSerie]),chartContract={chart:resultChart,title:_objectSpread({text:title},null==options?void 0:options.title),subtitle:_objectSpread({},null==options?void 0:options.subtitle),credits:{enabled:!1},pane:_objectSpread(_objectSpread({},pane),null==options?void 0:options.pane),plotOptions:_objectSpread(_objectSpread({},plotOptions),null==options?void 0:options.plotOptions),tooltip:_objectSpread({useHTML:!0,followPointer:!0,backgroundColor:"transparent"},null==options?void 0:options.tooltip)};setGaugeOptions(_objectSpread(_objectSpread({},chartContract),{},{yAxis,series:_toConsumableArray(series)}))}}),[checkpoints,indicator,min,max,options,ranges,units]),(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:gaugeOptions&&(0,jsx_runtime.jsx)(Chart.Z,{"data-testid":dataTestId,options:gaugeOptions})})},propTypes={checkpoints:prop_types_default().arrayOf(prop_types_default().shape({color:prop_types_default().string.isRequired,tooltip:prop_types_default().string,value:prop_types_default().number.isRequired})),comparison:prop_types_default().shape({enabled:prop_types_default().bool.isRequired,period:prop_types_default().shape({from:prop_types_default().instanceOf(Date),to:prop_types_default().instanceOf(Date),type:prop_types_default().string,text:prop_types_default().string}),color:prop_types_default().string,value:prop_types_default().number.isRequired,showAsPercentage:prop_types_default().bool}),"data-testid":prop_types_default().string,decimalPoint:prop_types_default().string,hasData:prop_types_default().bool,indicator:prop_types_default().shape({color:prop_types_default().string.isRequired,tooltip:prop_types_default().string,value:prop_types_default().number.isRequired}).isRequired,max:prop_types_default().number.isRequired,min:prop_types_default().number.isRequired,options:prop_types_default().shape({}),ranges:prop_types_default().arrayOf(prop_types_default().shape({color:prop_types_default().string.isRequired,tooltip:prop_types_default().string,from:prop_types_default().number,to:prop_types_default().number.isRequired})),showAsPercentage:prop_types_default().bool,thousandsSep:prop_types_default().string,title:prop_types_default().string,type:prop_types_default().oneOf(["DIAL"]).isRequired,units:prop_types_default().string},defaultOptions={chart:{type:"solidgauge"},title:{text:""},credits:{enabled:!1},pane,plotOptions,tooltip:{useHTML:!0,followPointer:!0,backgroundColor:"transparent"}};Gauge.propTypes=propTypes,Gauge.defaultProps={type:"DIAL",showAsPercentage:!1,decimalPoint:",",thousandsSep:".",hasData:!0},Gauge.__docgenInfo={description:"",methods:[],displayName:"Gauge",props:{type:{defaultValue:{value:"'DIAL'",computed:!1},description:"Posible types of visualization of Gauge. Currently, DIAL is only available.",type:{name:"enum",value:[{value:"'DIAL'",computed:!1}]},required:!1},showAsPercentage:{defaultValue:{value:"false",computed:!1},description:"Values related to indicator, checkpoints and comparison will be shown in percentage format",type:{name:"bool"},required:!1},decimalPoint:{defaultValue:{value:"','",computed:!1},description:"Format of decimal point on the representation of the values on the chart.",type:{name:"string"},required:!1},thousandsSep:{defaultValue:{value:"'.'",computed:!1},description:"Format of thousand separation on the representation of the values on the chart.",type:{name:"string"},required:!1},hasData:{defaultValue:{value:"true",computed:!1},description:'Property to indicate if the indicator has or not data to be calculated. If this boolean is TRUE, the main indicator and comparison, if enabled, will show "-".',type:{name:"bool"},required:!1},checkpoints:{description:"Array of objects to draw pointers on the arc dedicated to indicator.",type:{name:"arrayOf",value:{name:"shape",value:{color:{name:"string",required:!0},tooltip:{name:"string",required:!1},value:{name:"number",required:!0}}}},required:!1},comparison:{description:"Object to compare a value against the indicator of the gauge. If it's enabled, it will show a text with the increment/decrement against the indicator.",type:{name:"shape",value:{enabled:{name:"bool",required:!0},period:{name:"shape",value:{from:{name:"instanceOf",value:"Date",required:!1},to:{name:"instanceOf",value:"Date",required:!1},type:{name:"string",required:!1},text:{name:"string",required:!1}},required:!1},color:{name:"string",required:!1},value:{name:"number",required:!0},showAsPercentage:{name:"bool",required:!1}}},required:!1},"data-testid":{description:"String to specify data test id for Gauge chart",type:{name:"string"},required:!1},indicator:{description:"Main value draw on main arc and center of gauge. If showAsPercentage is activated, this value will be scaled to a value between 0%-100%.",type:{name:"shape",value:{color:{name:"string",required:!0},tooltip:{name:"string",required:!1},value:{name:"number",required:!0}}},required:!0},max:{description:"Maximum value for the gauge. If showAsPercentage is activated, this value will be overwritten by 100.",type:{name:"number"},required:!0},min:{description:"Minimum value for the gauge. If showAsPercentage is activated, this value will be overwritten by 0.",type:{name:"number"},required:!0},options:{description:'All the highcharts options you can see on the <a href="https://api.highcharts.com/highcharts/chart">documentation</a>',type:{name:"shape",value:{}},required:!1},ranges:{description:"Array of objects to draw range arcs below the arc dedicated to indicator.",type:{name:"arrayOf",value:{name:"shape",value:{color:{name:"string",required:!0},tooltip:{name:"string",required:!1},from:{name:"number",required:!1},to:{name:"number",required:!0}}}},required:!1},title:{description:"Title of the chart",type:{name:"string"},required:!1},units:{description:"Units of the indicator of the gauge",type:{name:"string"},required:!1}}};const components_Gauge=Gauge}}]);