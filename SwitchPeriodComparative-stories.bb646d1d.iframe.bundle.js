"use strict";(self.webpackChunk_dexma_ui_components=self.webpackChunk_dexma_ui_components||[]).push([[4998],{"./src/stories/SwitchPeriodComparative.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>SwitchPeriodComparative_stories,switchPeriodComparative:()=>switchPeriodComparative,switchPeriodComparativeWitText:()=>switchPeriodComparativeWitText});var _switchPeriodComparat,_switchPeriodComparat2,_switchPeriodComparat3,_switchPeriodComparat4,_switchPeriodComparat5,_switchPeriodComparat6,react=__webpack_require__("./node_modules/react/index.js"),SwitchPeriodComparative=__webpack_require__("./src/components/SwitchPeriodComparative.js"),Grid=__webpack_require__("./src/components/Grid.js"),Cell=__webpack_require__("./src/components/Cell.js"),Row=__webpack_require__("./src/components/Row.js"),Paragraph=__webpack_require__("./src/components/Paragraph.js"),endDate="2019-06-06T23:59:59+02:00",jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!==_typeof(input)||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!==_typeof(res))return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"===_typeof(key)?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i.return&&(_r=_i.return(),Object(_r)!==_r))return}finally{if(_d)throw _e}}return _arr}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}const SwitchPeriodComparative_stories={title:"SwitchPeriodComparative",component:SwitchPeriodComparative.ZP};var switchPeriodComparative=function switchPeriodComparative(){var _useState2=_slicedToArray((0,react.useState)({period:"previous_period",date:null}),2),stateNoText=_useState2[0],setStateNoText=_useState2[1];return(0,jsx_runtime.jsx)(Grid.Z,{fluid:!0,children:(0,jsx_runtime.jsxs)(Row.Z,{children:[(0,jsx_runtime.jsx)(Cell.Z,{xs:12,children:(0,jsx_runtime.jsx)(Paragraph.Z,{margin:"1rem 0 1rem 0",children:"A switch period comparative between two dates start and end, the text its optional so if you dont put nothing its ok"})}),(0,jsx_runtime.jsx)(Cell.Z,{xs:12,children:(0,jsx_runtime.jsx)(SwitchPeriodComparative.ZP,{selectedPeriod:stateNoText.period,startDate:"2019-05-31T00:00:00+02:00",endDate,onPeriodSelect:function onPeriodSelect(_ref){var period=_ref.period,date=_ref.date;return setStateNoText({period,date})}})})]})})};switchPeriodComparative.displayName="switchPeriodComparative";var switchPeriodComparativeWitText=function switchPeriodComparativeWitText(){var _useState4=_slicedToArray((0,react.useState)({period:"previous_period",date:null}),2),state=_useState4[0],setState=_useState4[1],period=state.period;return(0,jsx_runtime.jsx)(Grid.Z,{fluid:!0,children:(0,jsx_runtime.jsxs)(Row.Z,{children:[(0,jsx_runtime.jsx)(Cell.Z,{xs:12,children:(0,jsx_runtime.jsx)(Paragraph.Z,{margin:"1rem 0 1rem 0",children:"A switch period comparative between two dates start and end, the text its optional so if you dont put nothing its ok"})}),(0,jsx_runtime.jsx)(Cell.Z,{xs:12,children:(0,jsx_runtime.jsx)(SwitchPeriodComparative.ZP,{selectedPeriod:period,startDate:"2019-05-31T00:00:00+02:00",endDate,previousPeriodText:"Previous period",samePeriodLastYearText:"Same period last year",onPeriodSelect:function onPeriodSelect(_ref2){var period=_ref2.period,date=_ref2.date;return setState({period,date})}})})]})})};switchPeriodComparativeWitText.displayName="switchPeriodComparativeWitText",switchPeriodComparative.parameters=_objectSpread(_objectSpread({},switchPeriodComparative.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_switchPeriodComparat=switchPeriodComparative.parameters)||void 0===_switchPeriodComparat?void 0:_switchPeriodComparat.docs),{},{source:_objectSpread({originalSource:"() => {\n  const [stateNoText, setStateNoText] = useState({\n    period: 'previous_period',\n    date: null\n  });\n  return <Grid fluid>\n      <Row>\n        <Cell xs={12}>\n          <Paragraph margin=\"1rem 0 1rem 0\">\n            A switch period comparative between two dates start and end, the\n            text its optional so if you dont put nothing its ok\n          </Paragraph>\n        </Cell>\n        <Cell xs={12}>\n          <SwitchPeriodComparative selectedPeriod={stateNoText.period} startDate={startDate} endDate={endDate} onPeriodSelect={({\n          period,\n          date\n        }) => setStateNoText({\n          period,\n          date\n        })} />\n        </Cell>\n      </Row>\n    </Grid>;\n}"},null===(_switchPeriodComparat2=switchPeriodComparative.parameters)||void 0===_switchPeriodComparat2||null===(_switchPeriodComparat3=_switchPeriodComparat2.docs)||void 0===_switchPeriodComparat3?void 0:_switchPeriodComparat3.source)})}),switchPeriodComparativeWitText.parameters=_objectSpread(_objectSpread({},switchPeriodComparativeWitText.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_switchPeriodComparat4=switchPeriodComparativeWitText.parameters)||void 0===_switchPeriodComparat4?void 0:_switchPeriodComparat4.docs),{},{source:_objectSpread({originalSource:"() => {\n  const [state, setState] = useState({\n    period: 'previous_period',\n    date: null\n  });\n  const {\n    period\n  } = state;\n  return <Grid fluid>\n      <Row>\n        <Cell xs={12}>\n          <Paragraph margin=\"1rem 0 1rem 0\">\n            A switch period comparative between two dates start and end, the\n            text its optional so if you dont put nothing its ok\n          </Paragraph>\n        </Cell>\n        <Cell xs={12}>\n          <SwitchPeriodComparative selectedPeriod={period} startDate={startDate} endDate={endDate} previousPeriodText={previousPeriodText} samePeriodLastYearText={samePeriodLastYearText} onPeriodSelect={({\n          period,\n          date\n        }) => setState({\n          period,\n          date\n        })} />\n        </Cell>\n      </Row>\n    </Grid>;\n}"},null===(_switchPeriodComparat5=switchPeriodComparativeWitText.parameters)||void 0===_switchPeriodComparat5||null===(_switchPeriodComparat6=_switchPeriodComparat5.docs)||void 0===_switchPeriodComparat6?void 0:_switchPeriodComparat6.source)})});var __namedExportsOrder=["switchPeriodComparative","switchPeriodComparativeWitText"];switchPeriodComparative.__docgenInfo={description:"",methods:[],displayName:"switchPeriodComparative"},switchPeriodComparativeWitText.__docgenInfo={description:"",methods:[],displayName:"switchPeriodComparativeWitText"}}}]);